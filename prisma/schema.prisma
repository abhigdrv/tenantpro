// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
}

model Property {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  city        String?
  state       String?
  zipCode     String?
  description String?  @db.Text
  rooms       Room[]
  maintenance MaintenanceRequest[]
}

model Room {
  id         Int      @id @default(autoincrement())
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])
  roomNumber String
  status     String   @default("vacant")
  rentAmount Float
  leases     Lease[]
}

model Tenant {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  dob       DateTime?
  leases    Lease[]
  maintenance MaintenanceRequest[]
}

model Lease {
  id         Int      @id @default(autoincrement())
  tenantId   Int
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  roomId     Int
  room       Room     @relation(fields: [roomId], references: [id])
  startDate  DateTime
  endDate    DateTime
  rentAmount Float
  depositPaid Float?
  payments   Payment[]
}

model Payment {
  id          Int      @id @default(autoincrement())
  leaseId     Int
  lease       Lease    @relation(fields: [leaseId], references: [id])
  amount      Float
  paymentDate DateTime
  paymentForMonth DateTime
  note        String?
  status      String
}

model MaintenanceRequest {
  id          Int      @id @default(autoincrement())
  tenantId    Int
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  propertyId  Int
  property    Property @relation(fields: [propertyId], references: [id])
  title       String
  description String   @db.Text
  priority    String   @default("low")
  status      String   @default("open")
  createdAt   DateTime @default(now())
}